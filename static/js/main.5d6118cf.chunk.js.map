{"version":3,"sources":["api/userId.js","api/userData.js","App.js","serviceWorker.js","index.js"],"names":["userId","username","url","concat","axios","get","then","res","data","split","userData","id","Promise","resolve","reject","user","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","refs","value","console","log","setState","img","hd_profile_pic_url_info","error","catch","err","errorMsg","state","react_default","a","createElement","className","onSubmit","ref","type","target","href","alt","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sPAUeA,EARA,SAAAC,GACd,IAAIC,EAAG,yBAAAC,OAA2BF,GAClC,OAAOG,IAAMC,IAAIH,GAChBI,KAAK,SAAAC,GAEL,OADaA,EAAIC,KAAKC,MAAM,UAAU,GAAGA,MAAM,MAAM,MCOxCC,EATE,SAAAT,GAAQ,OAAID,EAAOC,GAAUK,KAAK,SAAAK,GAC/C,IAAIT,EAAG,wCAAAC,OAA0CQ,EAA1C,UACP,OAAOP,IAAMC,IAAIH,GAAKI,KAAK,SAAAE,GACvB,OAAO,IAAII,QAAQ,SAACC,EAAQC,GACxB,OAAOD,EAAQL,EAAKA,KAAKO,aCyCtBC,cA3Cb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOJI,aAAe,SAACC,GACdA,EAAEC,iBACFhB,EAASO,EAAKU,KAAK1B,SAAS2B,OAC3BtB,KAAK,SAAAE,GACJqB,QAAQC,IAAItB,GACZS,EAAKc,SAAS,CACZC,IAAIxB,EAAKyB,wBAAwB/B,IACjCgC,OAAM,MAGTC,MAAM,SAAAC,GACLP,QAAQC,IAAI,cAAeM,GAC3BnB,EAAKc,SAAS,CAACG,OAAM,EAAMG,SAAU,sBAlBrCpB,EAAKqB,MAAM,CACTN,IAAI,kCACJE,OAAM,EACNG,SAAS,MALApB,wEA0BX,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACjBH,EAAAC,EAAAC,cAAA,QAAME,SAAUvB,KAAKI,cACrBe,EAAAC,EAAAC,cAAA,SAAOG,IAAI,aACXL,EAAAC,EAAAC,cAAA,UAAQI,KAAK,UAAb,UAGAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEdtB,KAAKkB,MAAMJ,MAAMK,EAAAC,EAAAC,cAAA,WAAMrB,KAAKkB,MAAMD,UAAgBE,EAAAC,EAAAC,cAAA,KAAGK,OAAQ,SAAUC,KAAM3B,KAAKkB,MAAMN,KAAKO,EAAAC,EAAAC,cAAA,OAAKO,IAAK,eAAgBC,IAAK7B,KAAKkB,MAAMN,gBArC5HkB,mBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.5d6118cf.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst userId = username => {\n\tlet url =`https://instagram.com/${username}`;\n\treturn axios.get(url)\n\t.then(res => {\n\t\tconst data = res.data.split('\"id\":\"')[1].split('\",')[0];\n\t\treturn data;\n\t})\n};\nexport default userId;","import axios from 'axios';\nimport userId from './userId';\n\n// let username='instagram';\nconst userData = username => userId(username).then(id=>{\n    let url =`https://i.instagram.com/api/v1/users/${id}/info/`;\n    return axios.get(url).then(data=>{\n        return new Promise((resolve,reject)=>{\n            return resolve(data.data.user)\n        })\n    })\n});\n\nexport default userData","import React, { Component } from 'react';\nimport userData from './api/userData';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      img:'https://via.placeholder.com/150',\n      error:false,\n      errorMsg:null,\n    }\n  }\nhandleSubmit = (e)=>{\n  e.preventDefault();\n  userData(this.refs.username.value)\n  .then(data=>{\n    console.log(data)\n    this.setState({\n      img:data.hd_profile_pic_url_info.url,\n      error:false,\n    })\n  })\n  .catch(err=>{\n    console.log('from app.js', err)\n    this.setState({error:true, errorMsg: \"User Not Found\"});\n  })\n  \n}\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n      <form onSubmit={this.handleSubmit}>\n      <input ref=\"username\"/>\n      <button type=\"submit\">send</button>\n      </form>\n      </div>\n      <div className=\"row\">\n\n      {this.state.error?<div>{this.state.errorMsg}</div>:<a target={\"_blank\"} href={this.state.img}><img alt={\"instagram dp\"} src={this.state.img}/></a>}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}