{"version":3,"sources":["api/userData.js","components/Loader.js","components/ImageBox.js","components/NotFound.js","components/DisplayBox.js","App.js","serviceWorker.js","index.js"],"names":["userData","username","url","concat","axios","get","then","data","graphql","user","Loader","react_default","a","createElement","ImageBox","_ref","img","followers","following","bio","target","href","alt","src","NotFound","DisplayBox","props","error","components_NotFound","components_ImageBox","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","state","preventDefault","setState","loading","loadUserData","handleInput","value","handleClear","_this2","console","log","edge_follow","imgUrl","profile_pic_url_hd","profile_pic_url","count","edge_followed_by","biography","catch","err","_this$state","className","onSubmit","placeholder","onChange","type","onClick","components_Loader","components_DisplayBox","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6cfc580f.chunk.js","sourcesContent":["import axios from 'axios';\n\n// let username='instagram';\nconst userData = username => {\n    let url =`https://instagram.com/${username}/?__a=1`;\n    return axios.get(url).then(data=>{\n            return data.data.graphql.user\n    })\n};\n\nexport default userData","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div>\n      <p>‚è≥ Loading...</p>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\n\nconst ImageBox = ({ img, followers, following, bio }) => {\n  return (\n    <div>\n      <p>üòé We found it!</p>\n      <a target={\"_blank\"} href={img}>\n        <p><b>Bio: </b>{bio}</p>\n        <p><b>Followers: </b>{followers} | <b>Following: </b>{following}</p>\n        <div>\n          <img alt={\"instagram dp\"} src={img} />\n        </div>\n        üôÑ View In full size\n      </a>\n    </div>\n  );\n}\n\nexport default ImageBox;","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <div>\n      <p>üò¢ User Not Found</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\n\nimport ImageBox from \"./ImageBox\";\nimport NotFound from \"./NotFound\";\n\nconst DisplayBox = (props) => {\n  if (props.error) {\n    return <NotFound />;\n  } else if (props.img) {\n    return <ImageBox {...props} />;\n  } else return null;\n};\n\nexport default DisplayBox;\n","import React, { Component } from \"react\";\nimport userData from \"./api/userData\";\nimport Loader from \"./components/Loader\";\nimport DisplayBox from \"./components/DisplayBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      img: null,\n      error: false,\n      loading: false,\n      followers:0,\n      following:0,\n      bio:'',\n    };\n  }\n  loadUserData(username) {\n    userData(username)\n      .then(data => {\n        console.log(data.edge_follow)\n        let imgUrl = null;\n        if(data.profile_pic_url_hd){\n          imgUrl = data.profile_pic_url_hd;\n        }else {\n          imgUrl = data.profile_pic_url;\n        }\n        this.setState({\n          img: imgUrl,\n          error: false,\n          loading: false,\n          following:data.edge_follow.count,\n          followers:data.edge_followed_by.count,\n          bio:data.biography,\n\n        });\n      })\n      .catch(err => {\n        this.setState({ error: true, loading: false });\n        console.log(err);\n      });\n  }\n\n  handleSubmit = e => {\n    let username = this.state.username;\n    e.preventDefault();\n    if (username) {\n      this.setState({ loading: true });\n      this.loadUserData(username);\n    }\n  };\n  handleInput = e => {\n    this.setState({ username: e.target.value });\n  };\n  handleClear = e => {\n    this.setState({ username: \"\" });\n  };\n\n  render() {\n    let { loading, username } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"flex\">\n          <div className=\"box\">\n            <h3>Hey, Stalker!</h3>\n            <h2>üì∏ Instagram DP</h2>\n            <div className=\"form-container\">\n              <form onSubmit={this.handleSubmit}>\n                <input placeholder=\"‚úçÔ∏è Enter IG username\" value={this.state.username} onChange={this.handleInput} />\n                <button type=\"submit\" className=\"search-button\">\n                  üîé<span>Search</span>\n                </button>\n                {username ? <button onClick={this.handleClear} className=\"close-icon\" type=\"reset\" /> : null}\n              </form>\n            </div>\n            <div className=\"dynamic\">{loading ? <Loader /> : <DisplayBox {...this.state} />}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}